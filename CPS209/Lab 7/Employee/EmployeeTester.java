/**
 * Tests that Employee has been implemented correctly. DO NOT EDIT THIS FILE
 */
public class EmployeeTester
{
    public static void main(String[] args)
    {
        System.out.println("------ TEST 1: Check that constructor works with valid input ------");
        System.out.println("Creating employee with name Tim and hourly rate 17.00");
        Employee emp1 = new Employee("Tim", 17.00);
        checkEmployee(emp1, "(Name: Tim, Rate: 17.0, Hours: 0.0)");

        System.out.println("\nCreating employee with name Melissa and hourly rate 21.50");
        Employee emp2 = new Employee("Melissa", 21.5);
        checkEmployee(emp2, "(Name: Melissa, Rate: 21.5, Hours: 0.0)");

        System.out.println("\n------ TEST 2: Check that exception is thrown for bad rate ------");
        System.out.println("Creating employee with name Rick and hourly rate 14.00");
        boolean pass = true;
        try {
            Employee emp3 = new Employee("Rick", 14.00);
            System.out.println("****** ERROR: CREATING THIS EMPLOYEE SHOULD FAIL ******");  // Should never get here
            pass = false;
        } catch (IllegalArgumentException e) {
            System.out.println("EXCEPTION CORRECTLY THROWN");
            pass = testStringOutput("Exception getMessage", e.getMessage(), "Hourly rate below minimum wage");
        }
        printTestResult(pass);

        System.out.println("Creating employee with name Sam and hourly rate 7.00");
        try {
            Employee emp3 = new Employee("Sam", 7.00);
            System.out.println("****** ERROR: CREATING THIS EMPLOYEE SHOULD FAIL ******");  // Should never get here
            pass = false;
        } catch (IllegalArgumentException e) {
            System.out.println("EXCEPTION CORRECTLY THROWN");
            pass = testStringOutput("Exception getMessage", e.getMessage(), "Hourly rate below minimum wage");
        }
        printTestResult(pass);

        System.out.println("\n------ TEST 3: Check that add hours works in valid case ------");
        System.out.println("Adding 20 hours to Tim");
        emp1.addHours(20.0);
        checkEmployee(emp1, "(Name: Tim, Rate: 17.0, Hours: 20.0)");

        System.out.println("Adding 15 hours to Tim");
        emp1.addHours(15.0);
        checkEmployee(emp1, "(Name: Tim, Rate: 17.0, Hours: 35.0)");

        System.out.println("\n------ TEST 4: Check that exception is thrown for negative hours ------");
        System.out.println("Adding -5 hours to Tim");
        try {
            emp1.addHours(-5.0);
            System.out.println("****** ERROR: ADDING HOURS SHOULD FAIL ******"); // Should never get here
            pass = false;
        } catch (IllegalArgumentException e) {
            System.out.println("EXCEPTION CORRECTLY THROWN");
            pass = testStringOutput("Exception getMessage", e.getMessage(), "Hours cannot be less than 0");
        }
        printTestResult(pass);

        System.out.println("\ncheck that hours hasn't changed");
        checkEmployee(emp1, "(Name: Tim, Rate: 17.0, Hours: 35.0)");
    }

    public static void checkEmployee(Employee e, String expected) {
        String output = e.toString();

        printTestResult(testStringOutput("toString", output, expected));

    }
    public static void printTestResult(boolean pass)
    {
        if (pass) {
            System.out.println("*** TEST PASSES ***\n");
        } else {
            System.out.println("*******************************************");
            System.out.println("*************** TEST FAILED ***************");
            System.out.println("*******************************************\n");
        }
    }

    public static boolean testStringOutput(String methodName, String output, String expected)
    {
        System.out.println("OUTPUT of " + methodName + ":   " + output);
        if (!output.equals(expected)) {
            System.out.println("EXPECTED of " + methodName + ": " + expected);
            System.out.println("    INCORRECT OUTPUT");
            return false;
        }
        return true;
    }

}
