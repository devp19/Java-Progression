/**
 * Tests the clock class. DO NOT EDIT THIS FILE.
 */
public class ClockTester
{

    public static void main(String[] args)
    {
        System.out.println("------ Test Proper Clocks ------");
        runExceptionTest(5, 34, 27, "05:34:27", "");
        runExceptionTest(1, 0, 0, "01:00:00", "");
        runExceptionTest(12, 59, 59, "12:59:59", "");

        System.out.println("------ Test Improper Clocks ------");
        runExceptionTest(0, 34, 27, "", "Hour value is invalid. Must be between 1 and 12");
        runExceptionTest(-5, 44, 17, "", "Hour value is invalid. Must be between 1 and 12");
        runExceptionTest(15, 14, 18, "", "Hour value is invalid. Must be between 1 and 12");

        runExceptionTest(5, -10, 21, "", "Minutes value is invalid. Must be between 0 and 59");
        runExceptionTest(7, 100, 17, "", "Minutes value is invalid. Must be between 0 and 59");

        runExceptionTest(10, 10, 121, "", "Seconds value is invalid. Must be between 0 and 59");
        runExceptionTest(9, 56, -16, "", "Seconds value is invalid. Must be between 0 and 59");
    }

    public static void runExceptionTest(int hours, int minutes, int seconds, String expectedClock, String expectedException)
    {
        System.out.println("Creating a clock with hour " + hours + ", minutes " + minutes + ", seconds " + seconds);
        Clock c = null;
        boolean pass = true;
        try {
            c = new Clock(hours, minutes, seconds);
            if (!expectedException.equals("")) {
                System.out.println("**** INCORRECT. SHOULD THROW IllegalArgumentException IN CONSTRUCTOR ****");
                pass = false;
            } else {
                pass = testStringOutput("Constructor", c.toString(), expectedClock);
            }
        } catch (IllegalArgumentException e) {
            System.out.println("IllegalArgumentException Correctly Occurred");
            if (expectedException.equals("")) {
                pass = false;
                System.out.println("**** IllegalArgumentException Incorrectly Thrown in Constructor ****");
            } else {
                pass = testStringOutput("Exception getMessage", e.getMessage(), expectedException);
            }
        } catch(Exception e) {
            System.out.println("**** Exception incorrectly thrown:");
            System.out.println(e);
            pass = false;
        }
        printTestResult(pass);
    }

    public static void printTestResult(boolean pass)
    {
        if (pass) {
            System.out.println("*** TEST PASSES ***\n");
        } else {
            System.out.println("*******************************************");
            System.out.println("*************** TEST FAILED ***************");
            System.out.println("*******************************************\n");
        }
    }

    public static boolean testStringOutput(String methodName, String output, String expected)
    {
        System.out.println("OUTPUT of " + methodName + ":   " + output);
        if (!output.equals(expected)) {
            System.out.println("EXPECTED of " + methodName + ": " + expected);
            System.out.println("    INCORRECT OUTPUT");
            return false;
        }
        return true;
    }
}
